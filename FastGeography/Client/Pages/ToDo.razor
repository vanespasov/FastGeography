@page "/todo"
@inject HttpClient Http

<h1>To-Do List</h1>
@if (items == null)
{
    <p><em>Loading...</em></p>
}
else if (!items.Any())
{
    <p><em>No ToDo items exist.  Please add some.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Remove</th>
                <th>Date</th>
                <th>Description</th>
                <th>Is Complete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td><button @onclick="() => RemoveTodo(item.ID)"><i class="oi oi-trash"></i></button></td>
                    <td>@item.DateCreated</td>
                    <td>@item.Description</td>
                    <td><input type=checkbox @onchange="() => ToggleToDo(item.ID)" /> @item.IsComplete</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (items != null)
{
    <input placeholder="A new ToDo item" @bind="@newItem" />
    <button @onclick="AddTodo">Create</button>
}

@code {
    IList<ToDoItem> items = new List<ToDoItem>();
    private string newItem;

    protected override async Task OnInitializedAsync()
    {
        items = await Http.GetFromJsonAsync<List<ToDoItem>>("sample-data/todoitems.json");
    }

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            items.Add(new ToDoItem()
                {
                    DateCreated = DateTime.Now,
                    Description = newItem,
                    ID = Guid.NewGuid()
                });

            newItem = string.Empty;
        }
    }

    private void RemoveTodo(Guid id)
    {
        items.Remove(items.First(x => x.ID == id));
    }

    private void ToggleToDo(Guid id)
    {
        //First find the item
        var todo = items.First(x => x.ID == id);
        todo.IsComplete = !todo.IsComplete;
    }

    class ToDoItem
    {
        public Guid ID { get; set; }
        public string Description { get; set; }
        public bool IsComplete { get; set; }
        public DateTime DateCreated { get; set; }
    }
}