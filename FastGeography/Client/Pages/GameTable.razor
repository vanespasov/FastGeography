@page "/fastgeography"
@using BingMapsRESTToolkit;
@using System.Net.Http.Json;
@using System.Linq;
@using FastGeography.Shared;
@inject HttpClient HttpClient;

<button @onclick="StartNewGame" class="btn btn-primary" disabled=@isStarted>New game</button>
<Countdown @ref="countdown"/>

@if (games == null)
{
    <p><em>Loading...</em></p>
}
else if (!games.Any())
{
    <p><em>No game started.  Please start one.</em></p>
}
else
{
    <label>Total points: @totalPoints </label>
    <br />
    @if (totalPoints > 0)
    {
        <label>Congratualations! You were awarded with @GetBadge() badge.</label>
        <img src=@GetBadgeImage() width="64px" />
    }
    <table class="table">
        <thead>
            <tr>
                <th>Letter</th>
                <th>City</th>
                <th>Village</th>
                <th>State</th>
                <th>River</th>
                <th>Mountain</th>
                <th>Time[s]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <GameRow Id=@game.Value.Id
                 DatePlayed=@game.Value.DatePlayed
                 Letter=@game.Value.Letter
                 City=@game.Value.City
                 Village=@game.Value.Village
                 State=@game.Value.State
                 River=@game.Value.River
                 Mountain=@game.Value.Mountain
                 IsFinished=@game.Value.IsFinished
                 SecondsPlayed=@game.Value.SecondsPlayed
                 OnClick=@CheckAnswers />
            }
        </tbody>
    </table>
}

@code {
    private string bingMapsKey = "AvgAK8EVgx50WkOB6cyA8ckUM5ku4U3kGJvxthKwE75_S4-c-XlTP82kUom8baQk";
    public IDictionary<Guid, Game> games { get; set; } = new Dictionary<Guid, Game>();
    private int totalPoints = 0;
    private int totalGames = 10;
    private int gamesPlayed = 0;
    private bool isStarted = false;
    private Countdown countdown;
    private IDictionary<char, Dictionary<string, string>> locations = new Dictionary<char, Dictionary<string, string>>();

    private void StartNewGame()
    {
        totalGames++;
        isStarted = true;
        Random random = new Random();
        var letter = (char)('A' + random.Next(0, 26));
        var key = Guid.NewGuid();

        games.Add(key, new Game()
            {
                Id = key,
                DatePlayed = DateTime.Now,
                Letter = letter,
                City = new GameLocation() { Answer = string.Empty },
                State = new GameLocation() { Answer = string.Empty },
                Village = new GameLocation() { Answer = string.Empty },
                River = new GameLocation() { Answer = string.Empty },
                Mountain = new GameLocation() { Answer = string.Empty },
                IsFinished = false
            });

        countdown.Start(60);
    }

    protected override async Task OnInitializedAsync()
    {
        //TODO: load the games that the user has played. Load them from the Redis cache.
        //games = await Http.GetFromJsonAsync<List<Game>>("sample-data/fastgeography.json");
    }

    async Task CheckAnswers(Game game)
    {
        countdown.Stop();
        game.SecondsPlayed = countdown.ElapsedSeconds;
        game.IsFinished = true;
        game.City.Points = await CheckGeoLocation(game.City, game.Letter);
        game.Village.Points = await CheckGeoLocation(game.Village, game.Letter);
        game.State.Points = await CheckGeoLocation(game.State, game.Letter);
        game.River.Points = await CheckGeoLocation(game.River, game.Letter);
        game.Mountain.Points = await CheckGeoLocation(game.Mountain, game.Letter);

        totalPoints = totalPoints + game.TotalPoints;

        games.Remove(game.Id);
        games.Add(game.Id, game);

        isStarted = !game.IsFinished;
    }


    private async Task<int> CheckGeoLocation(GameLocation? location, char gameLetter)
    {
        var points = 0;

        if (string.IsNullOrEmpty(location.Answer))
            return 0;//TODO: add a penalty for empty answer

        if (!location.Answer.StartsWith(gameLetter))
            return -10;//TODO: add a penalty for wrong letter

        //var response = await HttpClient.GetAsync($"bingmaps/{location}");
        var response = await HttpClient.GetAsync($"bingmaps/{location.Answer}/{location.LocationType}");

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            var resultData = result.Split(":");
            points = int.Parse(resultData[1]);
            if (resultData.Length > 2)
            {
                location.Coordinates = resultData[2];
            }
        }
        else
        {
            // Handle the error here...
        }

        return points;
    }

    private Badge GetBadge()
    {
        if (totalPoints > 0 && totalPoints <= 100)
            return Badge.Junior;
        else if (totalPoints > 100 && totalPoints <= 200)
            return Badge.Cadet;
        else if (totalPoints > 200 && totalPoints <= 300)
            return Badge.Explorer;
        else if (totalPoints > 300 && totalPoints <= 400)
            return Badge.Traveller;
        else if (totalPoints > 400 && totalPoints <= 500)
            return Badge.Jumper;
        else if (totalPoints > 500 && totalPoints <= 600)
            return Badge.EarthSurfer;
        else if (totalPoints > 600 && totalPoints <= 700)
            return Badge.EarthConqueror;
        else if (totalPoints > 700 && totalPoints <= 800)
            return Badge.SolarSpectre;
        else if (totalPoints > 800 && totalPoints <= 900)
            return Badge.GalacticSurfer;
        else if (totalPoints > 900 && totalPoints <= 1000)
            return Badge.GalacticConqueror;

        return Badge.Junior;
    }

    private string GetBadgeImage()
    {
        var rating = (int)GetBadge();
        return $"images/badge-{rating}.png";
    }
}