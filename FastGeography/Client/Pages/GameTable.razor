@page "/fastgeography"
@using BingMapsRESTToolkit;
@using System.Net.Http.Json;
@inject HttpClient HttpClient;
@using static FastGeography.Client.Shared.GameRow;
<h3>Game</h3>

<button @onclick="StartNewGame">Start new game on letter...</button>

@if (games == null)
{
    <p><em>Loading...</em></p>
}
else if (!games.Any())
{
    <p><em>No game started.  Please start one.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Letter</th>
                <th>City</th>
                <th>Village</th>
                <th>State</th>
                <th>River</th>
                <th>Mountain</th>
                <th>Plant</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Game game in games)
            {
                <GameRow Letter=@game.Letter
                 City=@game.City
                 Village=@game.Village
                 State=@game.State
                 River=@game.River
                 Mountain=@game.Mountain
                 Plant=@game.Plant
                 OnClick=@HandleClick />
            }
        </tbody>
    </table>
}

@code {
    public IList<Game> games { get; set; } = new List<Game>();
    private Game newGame;

    private void StartNewGame()
    {
        Random random = new Random();
        var letter = (char)('A' + random.Next(0, 26));
        newGame = new Game();
        newGame.Letter = letter;
        newGame.City = string.Empty;
        newGame.State = string.Empty;
        newGame.Village = string.Empty;
        newGame.River = string.Empty;
        newGame.Mountain = string.Empty;
        newGame.Plant = string.Empty;

        games.Add(newGame);
    }

    protected override async Task OnInitializedAsync()
    {
        //TODO: load the games that the user has played. Load them from the Redis cache.
        //games = await Http.GetFromJsonAsync<List<Game>>("sample-data/fastgeography.json");
    }

    async Task HandleClick(Game game)
    {
        char? enteredLetter = game.Letter;
        string? enteredCity = game.City;
        string? enteredVillage = game.Village;
        string? enteredState = game.State;
        string? enteredRiver = game.River;
        string? enteredMountain = game.Mountain;
        string? enteredPlant = game.Plant;

        //TODO: Validate the fields above by invoking the BingMapsRESTToolkit
        game.CityPoint = await CheckGeoLocation(game.City, EntityType.PopulatedPlace.ToString());
        game.VillagePoint = await CheckGeoLocation(game.Village, EntityType.PopulatedPlace.ToString());
        game.StatePoint = await CheckGeoLocation(game.State, EntityType.AdminDivision1.ToString());
        game.RiverPoint = await CheckGeoLocation(game.River, "River");
        game.MountainPoint = await CheckGeoLocation(game.Mountain, "Mountain");
        
        games.Add(new Game()
            {
                Letter = enteredLetter,
                City = enteredCity,
                Village = enteredVillage,
                State = enteredState,
                River = enteredRiver,
                Mountain = enteredMountain,
                Plant = enteredPlant
            });

        //Create JSON from the fields above and call API to store to DB.
    }

    private string bingMapsKey = "AvgAK8EVgx50WkOB6cyA8ckUM5ku4U3kGJvxthKwE75_S4-c-XlTP82kUom8baQk";

    private async Task<int> CheckGeoLocation(string location, string locationType)
    {
        if(string.IsNullOrEmpty(location))
        {
            return 0;
        }

        // Send the geocode request and get the response
        return await GetResourcesFromRequest(location, locationType);
    }

    private async Task<int> GetResourcesFromRequest(string location, string locationType)
    {
        var points = 0;
        //var response = await HttpClient.GetAsync($"bingmaps/{location}");
        var response = await HttpClient.GetAsync($"bingmaps/{location}/{locationType}");

        if (response.IsSuccessStatusCode)
        {
            // Get the location type from the response body
            var result = await response.Content.ReadAsStringAsync();
            var termPoints = result.Split(":");
            points = int.Parse(termPoints[1]);
        }
        else
        {
            // Handle the error here...
        }
        return points;
    }
}