@page "/fastgeography"
@using BingMapsRESTToolkit;
@using System.Net.Http.Json;
@using System.Linq;
@using FastGeography.Shared;
@inject HttpClient HttpClient;

<button @onclick="StartNewGame" class="btn btn-primary" disabled=@isStarted>New game</button>

@if (games == null)
{
    <p><em>Loading...</em></p>
}
else if (!games.Any())
{
    <p><em>No game started.  Please start one.</em></p>
}
else
{
    <br />
    <label>Total points: @totalPoints</label>
    <table class="table">
        <thead>
            <tr>
                <th>Letter</th>
                <th>City</th>
                <th>Village</th>
                <th>State</th>
                <th>River</th>
                <th>Mountain</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <GameRow Id=@game.Value.Id
                 DatePlayed=@game.Value.DatePlayed
                 Letter=@game.Value.Letter
                 City=@game.Value.City
                 CityPoints=@game.Value.CityPoints
                 Village=@game.Value.Village
                 VillagePoints=@game.Value.VillagePoints
                 State=@game.Value.State
                 StatePoints=@game.Value.StatePoints
                 River=@game.Value.River
                 RiverPoints=@game.Value.RiverPoints
                 Mountain=@game.Value.Mountain
                 MountainPoints=@game.Value.MountainPoints
                 IsFinished=@game.Value.IsFinished
                 OnClick=@CheckAnswers />
            }
        </tbody>
    </table>
}

@code {
    private string bingMapsKey = "AvgAK8EVgx50WkOB6cyA8ckUM5ku4U3kGJvxthKwE75_S4-c-XlTP82kUom8baQk";
    public IDictionary<Guid, Game> games { get; set; } = new Dictionary<Guid, Game>();
    private int totalPoints = 0;
    private bool isStarted = false;

    private void StartNewGame()
    {
        isStarted = true;
        Random random = new Random();
        var letter = (char)('A' + random.Next(0, 26));
        var key = Guid.NewGuid();

        games.Add(key, new Game()
            {
                Id = key,
                DatePlayed = DateTime.Now,
                Letter = letter,
                City = string.Empty,
                State = string.Empty,
                Village = string.Empty,
                River = string.Empty,
                Mountain = string.Empty,
                IsFinished = false
            });
    }

    protected override async Task OnInitializedAsync()
    {
        //TODO: load the games that the user has played. Load them from the Redis cache.
        //games = await Http.GetFromJsonAsync<List<Game>>("sample-data/fastgeography.json");
    }

    async Task CheckAnswers(Game game)
    {
        char enteredLetter = game.Letter;
        string? enteredCity = game.City;
        string? enteredVillage = game.Village;
        string? enteredState = game.State;
        string? enteredRiver = game.River;
        string? enteredMountain = game.Mountain;

        game.IsFinished = true;
        game.CityPoints = await CheckGeoLocation(game.City, LocationType.City, game.Letter);
        game.VillagePoints = await CheckGeoLocation(game.Village, LocationType.Village, game.Letter);
        game.StatePoints = await CheckGeoLocation(game.State, LocationType.State, game.Letter);
        game.RiverPoints = await CheckGeoLocation(game.River, LocationType.River, game.Letter);
        game.MountainPoints = await CheckGeoLocation(game.Mountain, LocationType.Mountain, game.Letter);

        totalPoints = totalPoints + game.TotalPoints;

        games.Remove(game.Id);
        games.Add(game.Id, game);
        isStarted = !game.IsFinished;
    }


    private async Task<int> CheckGeoLocation(string? location, LocationType locationType, char gameLetter)
    {
        var points = 0;

        if (string.IsNullOrEmpty(location))
            return 0;

        if (!location.StartsWith(gameLetter))
            return -10;

        //var response = await HttpClient.GetAsync($"bingmaps/{location}");
        var response = await HttpClient.GetAsync($"bingmaps/{location}/{locationType}");

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            var termPoints = result.Split(":");
            points = int.Parse(termPoints[1]);
        }
        else
        {
            // Handle the error here...
        }

        return points;
    }
}